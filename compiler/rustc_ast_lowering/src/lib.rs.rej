diff a/compiler/rustc_ast_lowering/src/lib.rs b/compiler/rustc_ast_lowering/src/lib.rs	(rejected hunks)
@@ -928,20 +928,27 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {
                     _ => (false, itctx),
                 };
 
-                if desugar_to_impl_trait {
+                let desugar = if let ImplTraitContext::Universal = itctx {
+                    self.is_in_dyn_type
+                } else {
+                    self.resolver.opt_local_def_id(constraint.impl_trait_id).is_some()
+                };
+                //if desugar_to_impl_trait {
+                //if self.resolver.opt_local_def_id(constraint.impl_trait_id).is_some() {
+                if desugar {
                     // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by
                     // constructing the HIR for `impl bounds...` and then lowering that.
+                    debug!("desugaring occurs: {:?}, {:?}", desugar_to_impl_trait, itctx);
+                    //let parent_def_id = self.current_hir_id_owner;
+                    let impl_trait_node_id = constraint.impl_trait_id;
 
-                    let parent_def_id = self.current_hir_id_owner;
-                    let impl_trait_node_id = self.resolver.next_node_id();
-                    self.resolver.create_def(
+                    /*self.resolver.create_def(
                         parent_def_id,
                         impl_trait_node_id,
                         DefPathData::ImplTrait,
                         ExpnId::root(),
                         constraint.span,
-                    );
-
+                    );*/
                     self.with_dyn_type_scope(false, |this| {
                         let node_id = this.resolver.next_node_id();
                         let ty = this.lower_ty(
@@ -960,6 +967,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {
                     // Desugar `AssocTy: Bounds` into a type binding where the
                     // later desugars into a trait predicate.
                     let bounds = self.lower_param_bounds(bounds, itctx);
+                    debug!("desugaring does not occur: {:?}, {:?}", desugar_to_impl_trait, itctx);
 
                     hir::TypeBindingKind::Constraint { bounds }
                 }
@@ -1289,6 +1297,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {
         // frequently opened issues show.
         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::OpaqueTy, span, None);
 
+        // impl_trait_node_id
         let opaque_ty_def_id = self.resolver.local_def_id(opaque_ty_node_id);
 
         let mut collected_lifetimes = FxHashMap::default();
